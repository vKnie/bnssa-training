// components/themes.ts
import { Platform, TextStyle } from 'react-native';
import { AppTheme, ThemeKeyType } from '../types';

// === D√âFINITION DES TH√àMES DE L'APPLICATION ===

// Th√®mes optimis√©s avec une structure coh√©rente pour diff√©rents contextes d'usage
export const appThemes: Record<ThemeKeyType, AppTheme> = {
  // Th√®me principal par d√©faut de l'application
  main: {
    primary: '#3766B7',                    // Bleu BNSSA officiel pour les √©l√©ments principaux
    secondary: '#6C8DC2',                  // Bleu plus clair pour les √©l√©ments secondaires
    accent: '#4CAF50',                     // Vert pour les accents et validations
    background: '#F5F7FA',                // Gris tr√®s clair pour le fond principal
    card: '#FFFFFF',                       // Blanc pour les cartes et conteneurs
    text: '#333333',                       // Gris fonc√© pour le texte principal
    textLight: '#666666',                  // Gris moyen pour le texte secondaire
    textInverse: '#FFFFFF',                // Blanc pour le texte sur fond sombre
    border: '#E0E0E0',                     // Gris clair pour les bordures
    success: '#4CAF50',                    // Vert pour les succ√®s et bonnes r√©ponses
    error: '#F44336',                      // Rouge pour les erreurs et mauvaises r√©ponses
    warning: '#FF9800',                    // Orange pour les avertissements
    info: '#2196F3',                       // Bleu pour les informations
  },
  
  // Th√®me sp√©cifique √† l'√©cran d'accueil
  home: {
    primary: '#3099EF',                    // Bleu vif pour l'interface d'accueil
    secondary: '#64B5F6',                  // Bleu plus clair compl√©mentaire
    background: '#F5F7FA',                // Fond coh√©rent avec le th√®me principal
    card: '#FFFFFF',                       // Cartes blanches pour contraste
    text: '#333333',                       // Texte sombre pour lisibilit√©
    textLight: '#666666',                  // Texte secondaire
    success: '#4CAF50',                    // Couleurs de statut coh√©rentes
    error: '#F44336',
    gradient: ['#3099EF', '#64B5F6'],     // D√©grad√© bleu pour les √©l√©ments visuels
  },
  
  // Th√®me pour les √©crans d'examen (plus formel et professionnel)
  examen: {
    primary: '#1e3c72',                    // Bleu marine professionnel
    secondary: '#2a5298',                  // Bleu soutenu compl√©mentaire
    accent: '#FF9800',                     // Orange pour les √©l√©ments d'attention
    background: '#F5F7FA',                // Fond neutre pour concentration
    card: '#FFFFFF',                       // Cartes claires pour lisibilit√©
    text: '#333333',                       // Texte contrast√©
    textLight: '#666666',                  // Texte secondaire
    success: '#4CAF50',                    // Couleurs de feedback standard
    error: '#F44336',
    gradient: ['#1e3c72', '#2a5298'],     // D√©grad√© bleu marine pour s√©rieux
  },
  
  // Th√®me pour les √©crans d'entra√Ænement (plus dynamique et motivant)
  training: {
    primary: '#FF5F6D',                    // Rouge-rose √©nergique
    secondary: '#FFC371',                  // Orange dor√© chaleureux
    accent: '#4CAF50',                     // Vert pour les succ√®s
    background: '#F5F7FA',                // Fond neutre coh√©rent
    card: '#FFFFFF',                       // Cartes blanches
    text: '#333333',                       // Texte standard
    textLight: '#666666',                  // Texte secondaire
    success: '#4CAF50',                    // Couleurs de statut standard
    error: '#F44336',
    gradient: ['#FF5F6D', '#FFC371'],     // D√©grad√© chaud et motivant
  },
};

// === MAPPING √âCRANS ‚Üí TH√àMES ===

// Mapping optimis√© des √©crans aux th√®mes pour application automatique
export const screenToTheme: Record<string, ThemeKeyType> = {
  HomeScreen: 'home',                      // √âcran d'accueil ‚Üí th√®me home
  ExamenScreen: 'examen',                  // Pr√©paration examen ‚Üí th√®me examen
  ExamenSession: 'examen',                 // Session d'examen ‚Üí th√®me examen
  ExamenSessionNote: 'examen',             // R√©sultats examen ‚Üí th√®me examen
  TrainingScreen: 'training',              // S√©lection entra√Ænement ‚Üí th√®me training
  TrainingSession: 'training',             // Session d'entra√Ænement ‚Üí th√®me training
  HistoricScreenTraining: 'training',      // Historique entra√Ænement ‚Üí th√®me training
};

// === STYLES D'OMBRES MULTIPLATEFORMES ===

// Shadow styles optimis√©s avec adaptation iOS/Android automatique
export const shadowStyles = {
  // Ombre l√©g√®re pour les √©l√©ments subtils (boutons, petites cartes)
  small: Platform.select({
    ios: {
      shadowColor: '#000',                 // Noir pour l'ombre
      shadowOffset: { width: 0, height: 1 }, // D√©calage vertical minimal
      shadowOpacity: 0.05,                 // Tr√®s l√©g√®re opacit√©
      shadowRadius: 3,                     // Flou minimal
    },
    android: {
      elevation: 2,                        // √âl√©vation Material Design √©quivalente
    },
    default: {},                           // Fallback pour autres plateformes
  }),
  
  // Ombre moyenne pour les cartes et conteneurs principaux
  medium: Platform.select({
    ios: {
      shadowColor: '#000',
      shadowOffset: { width: 0, height: 2 }, // D√©calage plus visible
      shadowOpacity: 0.08,                   // Opacit√© mod√©r√©e
      shadowRadius: 6,                       // Flou moyen
    },
    android: {
      elevation: 4,                          // √âl√©vation moyenne
    },
    default: {},
  }),
  
  // Ombre forte pour les modals et √©l√©ments flottants
  large: Platform.select({
    ios: {
      shadowColor: '#000',
      shadowOffset: { width: 0, height: 4 }, // D√©calage prononc√©
      shadowOpacity: 0.12,                   // Opacit√© plus forte
      shadowRadius: 10,                      // Flou important
    },
    android: {
      elevation: 8,                          // Forte √©l√©vation
    },
    default: {},
  }),
};

// === CONFIGURATION TYPOGRAPHIQUE ===

// Configuration de typographie standardis√©e pour coh√©rence visuelle
export const typography = {
  // Tailles de police hi√©rarchis√©es
  heading1: 24,                            // Titres principaux (√©crans, sections importantes)
  heading2: 20,                            // Sous-titres principaux
  heading3: 18,                            // Sous-titres secondaires
  body1: 16,                               // Texte principal (questions, contenu)
  body2: 14,                               // Texte secondaire (descriptions, labels)
  caption: 12,                             // Texte de l√©gende (m√©tadonn√©es, notes)
  button: 16,                              // Texte des boutons
  
  // Poids de police avec types TypeScript corrects
  fontWeightRegular: '400' as TextStyle['fontWeight'],  // Poids normal
  fontWeightMedium: '500' as TextStyle['fontWeight'],   // Poids moyen (emphase l√©g√®re)
  fontWeightBold: '700' as TextStyle['fontWeight'],     // Poids gras (titres, boutons)
};

// === SYST√àME D'ESPACEMENT ===

// Espacement standardis√© bas√© sur une √©chelle coh√©rente (multiples de 4)
export const spacing = {
  xs: 4,                                   // Tr√®s petit espacement (marges internes)
  s: 8,                                    // Petit espacement (entre √©l√©ments proches)
  m: 16,                                   // Espacement moyen (standard pour la plupart des cas)
  l: 24,                                   // Grand espacement (sections, groupes)
  xl: 32,                                  // Tr√®s grand espacement (s√©parateurs majeurs)
  xxl: 48,                                 // Espacement extra-large (√©crans, en-t√™tes)
} as const;

// === SYST√àME DE BORDURES ARRONDIES ===

// Arrondis standardis√©s pour coh√©rence du design
export const borderRadius = {
  small: 4,                                // Petits arrondis (boutons texte, inputs)
  medium: 8,                               // Arrondis moyens (cartes, boutons standard)
  large: 12,                               // Grands arrondis (conteneurs principaux)
  xl: 16,                                  // Tr√®s grands arrondis (modals, sections)
  xxl: 24,                                 // Arrondis extra-larges (√©l√©ments d√©coratifs)
  round: 9999,                             // Compl√®tement rond (boutons circulaires, avatars)
} as const;

// === ICONOGRAPHIE DES TH√àMES D'ENTRA√éNEMENT ===

// Ic√¥nes emoji pour identifier visuellement chaque th√®me d'entra√Ænement BNSSA
export const themeIcons: Record<string, string> = {
  'Connaissance du milieu': 'üèä',                              // Natation pour le milieu aquatique
  'Dipl√¥mes, comp√©tences et obligations': 'üéì',               // Dipl√¥me pour les qualifications
  'Organisation administrative': 'üìã',                         // Presse-papiers pour l'administration
  'Organisation de la s√©curit√©': 'üõ°Ô∏è',                       // Bouclier pour la s√©curit√©
  'Surveillance et s√©curit√© des activit√©s sp√©cifiques': 'üëÅÔ∏è', // ≈íil pour la surveillance
  'Conduite √† tenir en cas d\'accident - Premiers secours': 'üöë', // Ambulance pour les secours
};

// === COULEURS DES TH√àMES D'ENTRA√éNEMENT ===

// Couleurs sp√©cifiques pour chaque th√®me d'entra√Ænement (am√©liore la reconnaissance visuelle)
export const themeColors: Record<string, string> = {
  'Connaissance du milieu': '#4CAF50',                        // Vert nature/eau
  'Dipl√¥mes, comp√©tences et obligations': '#2196F3',         // Bleu professionnel
  'Organisation administrative': '#FF9800',                   // Orange organisation
  'Organisation de la s√©curit√©': '#F44336',                  // Rouge s√©curit√©/danger
  'Surveillance et s√©curit√© des activit√©s sp√©cifiques': '#9C27B0', // Violet surveillance
  'Conduite √† tenir en cas d\'accident - Premiers secours': '#E91E63', // Rose m√©dical
};

// === SYST√àME DE CACHE POUR OPTIMISATION ===

// Cache pour les th√®mes afin d'√©viter les recalculs r√©p√©t√©s
const themeCache = new Map<string, AppTheme>();

// === FONCTIONS UTILITAIRES ===

/**
 * Hook optimis√© pour obtenir le th√®me d'un √©cran avec mise en cache
 * √âvite les recalculs r√©p√©t√©s et am√©liore les performances
 * @param screenName - Nom de l'√©cran (route name)
 * @returns Th√®me configur√© pour l'√©cran
 */
export const getThemeForScreen = (screenName: string): AppTheme => {
  // V√©rification du cache en premier
  if (themeCache.has(screenName)) {
    return themeCache.get(screenName)!;
  }
  
  // R√©cup√©ration du th√®me selon le mapping ou fallback vers 'main'
  const themeKey = screenToTheme[screenName] || 'main';
  const theme = appThemes[themeKey];
  
  // Mise en cache pour les appels futurs
  themeCache.set(screenName, theme);
  return theme;
};

/**
 * Utilitaire pour obtenir la couleur d'un th√®me d'entra√Ænement
 * @param themeName - Nom du th√®me d'entra√Ænement
 * @param defaultColor - Couleur par d√©faut si th√®me non trouv√©
 * @returns Couleur hexad√©cimale du th√®me
 */
export const getThemeColor = (themeName: string, defaultColor: string): string => {
  return themeColors[themeName] || defaultColor;
};

/**
 * Utilitaire pour obtenir l'ic√¥ne d'un th√®me d'entra√Ænement
 * @param themeName - Nom du th√®me d'entra√Ænement
 * @param defaultIcon - Ic√¥ne par d√©faut si th√®me non trouv√©
 * @returns Emoji repr√©sentant le th√®me
 */
export const getThemeIcon = (themeName: string, defaultIcon: string): string => {
  return themeIcons[themeName] || defaultIcon;
};